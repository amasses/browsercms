# Upgrading to bcms 3.4

* Ensure there is no table prefix set (i.e. tables will in versions prior to 3.4 were not prefixed with cms_

New Project using 3.3
===============
gem install browsercms
bcms name_of_project


Upgrading a Module to use BrowserCMS 3.3. (and Rails3)

* Update the lib/bcms_name_of_module/routes.rb to use the Rails 3 routing syntax. This means routes like:

# Rails 2 style
namespace(:cms) do |cms|
    cms.content_blocks :news_articles
end

should be written as:

# Rails 3 style
namespace(:cms) do
    content_blocks :news_articles
end

Other individual routes may need to be rewritten as well, for example:

# Rails 2 style
news_articles '/news/articles.rss', :controller => "news_articles", :conditions => {:method => :get}, :format => "rss"
# Becomes Rails 3 style
match '/news/articles.rss', :to=>"news_articles#index", :as=>'news_articles', :method=>:get, :defaults => { :format => 'rss' }




Writing a generator to handle upgrading bcms_modules from Rails 2 to Rails 3.
=======

Assumed
======
* Make sure the module is in source control. These instructions rely on being able to revert. merge and check in files.

Steps:
======
* Do script/plugin install git://github.com/rails/rails_upgrade.git . This installs the rails 3 upgrade plugin.
* Run rake rails:update:check
* Run rake rails:update:gems ; Create a Gemfile with that code in it.
* Run rake rails:update:routes ; Create a file config/routes.rails3.rb with that code in it. This will be used to merge the routes later.

* [D] Create a file called lib/tasks/build_gem.rake. Copy all Jeweler code from Rakefile to this file. Test and check this in.
* [D] From inside the project, run rails new . This will generate a new Rails3 project on top of the existing module. Enter a to overwrite all files.

Files to Delete (after rails new)
=====
* [D] Remove the rails/init.rb (No longer needed. Uses Engine instead)
* [D] Remove the db/migrate/browsercms_3_0_0.rb from the project
* [D] Remove the db/migrate/browsercms_3_0_5.rb from the project
* [D] Remove the db/migrate/load_seed_data.rb from the project
* [D] Remove public/index.html
* [D] Remove the app/views/layouts/application.html.erb (Use core CMS layouts)

Files to rollback
====
* [D] doc/README_FOR_APP
* [D] README (either delete or rollback depending on if you have a README.md or not)
* [D].gitignore
* [D] database.yml - Unlikely you want this to change

File to merge (diff new vs old)
===
* [D] test/test_helper (If you added anything custom)
* [D] Rakefile (compare, especially if you used Jeweler. If Jeweler, make sure you moved those tasks to lib/tasks/build_gem.rake)

More Steps:
==========
* [D] Edit config/routes.rb file. Make sure you have these routes:

BcmsNameOfModule::Application.routes.draw do
  routes_for_bcms_name_of_module
  routes_for_browser_cms
end

* [D] Add Jeweler to the Gemfile (if you use it)

group :development do
  gem "jeweler"
end

* [D] Add mysql to the Gemfile (if you use it)

gem "mysql"

* [D] Create an Engine for the module
* [D] Create a generator that will handle installing any migrations from your gem.
* [D] Remove all public CMS files
* [D] Run 'rails g browser_cms:cms' to write the migrations out from the core CMS gem.
* Run 'rake db:drop db:create db:migrate db:seed' to rebuild the database.
* Run tests (may have to update require 'test_helper' in _test.rbs)

* Run rake rails:upgrade:check to get other warnings about your code (i.e. deprecation warnings about named_scope)