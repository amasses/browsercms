#!/usr/bin/env ruby

require 'rubygems'
require 'thor'
require 'term/ansicolor'
require 'rails/generators/actions'
require 'active_support/core_ext/string/inflections'
require 'cms/version'

# This seems to be required only due to a bug in Thor documented here:
#   https://rails.lighthouseapp.com/projects/8994/tickets/4692-error-when-creating-app-from-template-undefined-method-wrap-for-arrayclass
# If this bug is fixed the following line can probably be removed.
require 'active_support/core_ext/array/wrap'


class String
  include Term::ANSIColor
end


class Cms::Install < Thor
  include Thor::Actions
  include Rails::Generators::Actions
  source_root File.expand_path('../../lib/generators/cms/upgrade_module/templates', __FILE__)

  def self.common_options
    method_option :database, :aliases => "-d", :desc => "Preconfigure for selected database (options: mysql/oracle/postgresql/sqlite3/frontbase/ibm_db) [Default: sqlite3]"
    method_option :template, :aliases => "-m", :desc => "Path to an application template (can be a filesystem path or URL)"
    method_option :skip_bundle, :aliases => "--skip-bundle", :desc => "Don't run bundle install", :default=>false, :type=>:boolean
  end

  desc "new [NAME]", "Creates a blank BrowserCMS project with a single default template. Suitable for starting a new website project."
  common_options

  def new(name)
    create_blank_cms_project(name)
    display_instructions(name)
  end


  desc 'demo [NAME]', "Generates a BrowserCMS application with a sample demo website. Suitable for learning BrowserCMS."
  common_options

  def demo(name)
    create_blank_cms_project(name)
    generate "browser_cms:demo_site"
    display_instructions(name)
  end


  desc 'module [NAME]', "Generates a BrowserCMS module for sharing code between BrowserCMS projects. (Name must start with bcms_)"
  common_options

  def module(name)
    @project_name = name
    create_mountable_app
    create_license_files

    inside rails_app do
      generate_seeds_rb
    end
    generate_browsercms_project
    generate_default_template

    display_instructions(name)
  end

  desc 'version', 'Show BrowserCMS version'
  map "-v" => :version, "--version" => :version

  def version
    puts "BrowserCMS #{Cms::VERSION}"
  end

  desc 'install', "Adds BrowserCMS to an existing rails application."

  def install
    common_setup('.')
    initializer 'browsercms.rb', <<-CODE
#{standard_file_permissions}
Cms.table_prefix = "cms_"
    CODE
    generate_default_template
    puts "BrowserCMS has been installed. Run rake db:install to add the tables then restart your server."
  end

  private

  def create_license_files
    template 'COPYRIGHT.txt'
    template 'LICENSE.txt'
    template 'GPL.txt'
  end

  # i.e. cd project_name
  def work_in_project_root_directory(name=@project_name)
    self.destination_root = (File.join(destination_root, name))
  end

  def create_rails_app(name)
    rails_cmd = "rails new #{name} --skip-bundle"
    if options[:template]
      rails_cmd += " -m #{options[:template]}"
    end
    if options[:database]
      rails_cmd += " -d #{options[:database]}"
    end
    run(rails_cmd)
  end

  def display_instructions(name)
    puts "\nCreated new BrowserCMS project '#{name}'."
    puts "    To get started, type 'cd #{name}'"
    puts "    then type 'rake db:install'"
    puts "    then type 'rails server' and open your browser to 'http://localhost:3000'."
  end

  def configure_default_cache_directory
    insert_into_file "config/environments/production.rb", :after => "Application.configure do\n" do
      <<-CODE
  config.action_controller.page_cache_directory = File.join(Rails.root,'public','cache')
      CODE
    end
  end

  # In Rails 3.0, we needed to disable xsendfile, since it was by default on in production.
  # In 3.1, this should be unnecessary because the default seems to have this commented out.
  #
  # Leaving here as unused for now in case later versions of Rails change this configuration.
  def disable_xsendfile
    insert_into_file "config/environments/production.rb", :before => 'config.action_dispatch.x_sendfile_header = "X-Sendfile"' do
      <<-CODE
# If you want to enable webservers to send binary files, you will need to uncomment X-Sendfile line below and configure Apache mod_sendfile
# See http://codequest.eu/articles/rails3-apache-passenger-and-empty-file-using-send-file for details
      CODE
    end

    gsub_file "config/environments/production.rb", /(config\.action_dispatch\.x_sendfile_header = "X-Sendfile")/, '  # \1'
  end

  # For Rails 3.0, we needed to turn on static asset serving in production, to allow assets to be served.
  # In 3.1, this should be unnecessary because of the asset pipeline.
  #
  # Leaving here as unused for now.
  def enable_static_asset_serving
    insert_into_file "config/environments/production.rb", :before => 'config.serve_static_assets = false' do
      <<-COMMENT
# This allows bcms to serve static assets (like admin css files) from the gem
      COMMENT
    end

    gsub_file "config/environments/production.rb", /(config\.serve_static_assets =) false/, '  \1 true'
  end

  def configure_mail_server
    insert_into_file "config/environments/production.rb", :after => "config.active_support.deprecation = :notify" do
      %q{

  # Configure your mail server's address below
  config.action_mailer.smtp_settings = {:address => 'mail.yourmailserver.com', :domain => "#{SITE_DOMAIN}"}}
    end
  end

  def add_sitedomain_constant_to_environment_files
    %w{development test production}.each do |env|
      prepend_to_file "config/environments/#{env}.rb" do
        <<-CODE
SITE_DOMAIN="localhost:3000"
        CODE
      end
    end
  end

  def generate_browsercms_project
    route "mount_browsercms"
    rake 'cms:install:migrations'
    generate "browser_cms:cms"
    copy_file 'README', "public/bcms/#{@project_name}/README"

    inside rails_app do
      add_sitedomain_constant_to_environment_files
      configure_default_cache_directory
      configure_mail_server
      create_browsercms_initializer
    end
  end

  # When working with modules, the 'root' is the dummy application
  def in_root
    inside(rails_app) { yield }
  end

  def rails_app
    if @project_name
      "test/dummy"
    else
      @destination_stack.first
    end
  end

  def project_root
    if @project_name
      @project_name
    else
      @destination_stack.first
    end
  end

  # For both creating new bcms project and adding bcms to existing rails projects.
  def common_setup(name)
    gem 'browsercms', :version=>::Cms::VERSION
    run_bundle_install
    generate :jdbc if defined?(JRUBY_VERSION)
    generate_browsercms_project
  end

  def run_bundle_install
    inside project_root do
      run "bundle install" unless options[:skip_bundle]
    end
  end

  def generate_default_template
    generate 'cms:template', "default"
  end

  def standard_file_permissions
    "Cms.attachment_file_permission = 0640"
  end

  def create_mountable_app(name = @project_name)
    run("rails plugin new #{name} --mountable --skip-bundle")
    work_in_project_root_directory(name)

    gemspec "browsercms", :version=>"~> #{::Cms::VERSION}"
    add_browsercms_dependency
    remove_rails_dependency
    run_bundle_install
  end

  def generate_seeds_rb
    create_file "db/seeds.rb", "# Load BrowserCMS seed data\n"
  end

  def add_browsercms_dependency
    prepend_file "lib/#{@project_name}/engine.rb", "require 'browsercms'\n"
  end

  def create_blank_cms_project(name)
    create_rails_app(name)
    work_in_project_root_directory(name)

    # Unsure if this handles windows specific removal of files
    remove_file("public/index.html")

    common_setup name
    create_browsercms_initializer
    generate_default_template

  end

  def create_browsercms_initializer
    initializer 'browsercms.rb', <<-CODE
#{standard_file_permissions}
    CODE
  end

  def gemspec_file
    "#{@project_name}.gemspec"
  end

  # Add a dependency to the project gemspec file.
  def gemspec(name, options={})
    text = <<-RUBY
      s.add_dependency "#{name}", "#{options[:version]}"\n
    RUBY
    insert_into_file(gemspec_file(), text, :after => "Gem::Specification.new do |s|\n")
  end

  def remove_rails_dependency
    insert_into_file gemspec_file, "# Depend on BrowserCMS,rather than Rails \n # ", :before=>"s.add_dependency \"rails\""
  end
end

Cms::Install.start
